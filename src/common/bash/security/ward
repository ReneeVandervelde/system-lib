#!/usr/bin/env bash
WARD_HOME=$HOME/.ward;

if [ -z "$WARD_KEY" ]; then
    compose error "Environment variable 'WARD_KEY' was not set.";
    exit $EXIT_ILLEGAL_STATE;
fi

COMMAND=$1;
shift;

function __assert-home-safety {
    if [[ $(stat -c "%a" $WARD_HOME) != "700" ]]; then
        compose error "Illegal permissions on ward home. Please init or clean."
        exit $EXIT_ILLEGAL_STATE
    fi
}

function __encrypt {
    local FILE=$(echo $1 | sed 's:/*$::');
    shift;
    if [[ "$FILE" == "." ]]; then
        compose error "Cannot close current directory"
        exit $EXIT_ILLEGAL_ARG;
    fi;

    if [[ -d "$FILE" ]]; then
        local TARBALL=${FILE}.tar.gz
        tar -czf ./$TARBALL ./$FILE || exit $EXIT_UNEXPECTED;
        rm -rf $FILE;
        __encrypt ./$TARBALL || exit $EXIT_UNEXPECTED;
    elif [[ -f "$FILE" ]]; then
        gpg --encrypt --armor -r $WARD_KEY $FILE || exit $EXIT_UNEXPECTED;
        rm $FILE;
        echo $FILE.asc;
    else
        compose error "File not found: $FILE"
        exit $EXIT_ILLEGAL_ARG;
    fi
}

function __decrypt {
    FILE=$1;
    shift;
    if [ -z "$FILE" ]; then
        compose error "File argument required."
        exit $EXIT_ILLEGAL_ARG;
    fi
    local DECRYPTED=$(echo $FILE | rev | cut -f 2- -d '.' | rev)
    gpg --decrypt $FILE > $DECRYPTED || exit $EXIT_UNEXPECTED;
    rm $FILE;

    if [[ $DECRYPTED == *.tar.gz ]]; then
        tar -xzf $DECRYPTED || exit $EXIT_UNEXPECTED;
        rm $DECRYPTED;
        echo ${DECRYPTED/.tar.gz/};
    else
        echo $DECRYPTED;
    fi
}

function __copy-prop {
    FILE=$1;
    shift;
    PROPERTY=$1
    shift;

    if [ -z "$FILE" ]; then
        compose error "File argument required."
        exit $EXIT_ILLEGAL_ARG;
    fi

    if [ -z "$PROPERTY" ]; then
        compose error "Property argument required."
        exit $EXIT_ILLEGAL_ARG;
    fi

    gpg --decrypt $FILE | grep "$PROPERTY" | cut -d'=' -f2 | clip
    compose success "Copied $FILE/$PROPERTY to clipboard"
    compose warning "Use within 30 seconds"
    $(sleep 30 && echo "" | clip) & 
}

function __prepareTmpFolder {
    mkdir -p $HOME/.ward/ || exit $EXIT_UNEXPECTED;
}

function __airlock {
    __assert-home-safety;
    __prepareTmpFolder;
    local FILE="";
    local SAVE=false;
    local AIRLOCK="$WARD_HOME/airlock-$RANDOM";

    while test $# -gt 0; do
        case "$1" in
            -s|--save)
                SAVE=true;
                shift;
                ;;
            *)
                FILE=$1;
                shift;
        esac
    done

    mkdir $AIRLOCK;

    cp $FILE $AIRLOCK;
    local START_DIR=$(pwd);
    local FILENAME=$(basename $FILE)
    cd $AIRLOCK;
        local DECRYPTED=$(__decrypt $FILENAME || (__shred $AIRLOCK; exit $EXIT_UNEXPECTED));
        compose hr
        compose h1 "Airlock for $FILENAME"
        compose body "To close, exit this shell."
        compose hr
        ls -als
        compose hr
        bash -l
        local STATUS=$?

        if [ $SAVE = true ] && [ $STATUS = 0 ]; then
            compose body "Saving Changes"
            __encrypt $DECRYPTED;
            cp -i $FILENAME $START_DIR/;
        fi
    cd -;

    __shred $AIRLOCK;
}

function __shred {
    local FILE=$1;
    
    if [[ "$FILE" == "" ]] || [[ "$FILE" == "/" ]] || [[ "$FILE" == "." ]]; then
        compose error "Refusing to shred ambiguous directory"
        exit $EXIT_ILLEGAL_ARG;
    fi

    if [[ -d "$FILE" ]]; then
        find $FILE/ -type f -exec shred --remove {} \;;
        rm -r $FILE/;
    elif [[ -f "$FILE" ]]; then
        shred --remove $FILE;
    else
        compose warning "Shred file not found: $FILE"
    fi
}

function __keymod {
    __assert-home-safety;
    __prepareTmpFolder;
    local KEYNAME=$1;
    local KEYCHAIN="pgp-keychain.tar.gz.asc";
    local KEY_PRIVATE=pgp-keychain/$KEYNAME-private.gpg;
    local KEY_PUBLIC=pgp-keychain/$KEYNAME-public.gpg;
    local SECURE_HOME=$HOME/Secure;
    local AIRLOCK="$WARD_HOME/airlock-$RANDOM";

    mkdir $AIRLOCK;
    cp $SECURE_HOME/$KEYCHAIN $AIRLOCK;

    cd $AIRLOCK;
        __decrypt $KEYCHAIN || (__shred $AIRLOCK; exit $EXIT_UNEXPECTED);
        if [[ ! -f "$KEY_PUBLIC" ]] || [[ ! -f "$KEY_PRIVATE" ]]; then
            compose error "Key-pair for <$KEYNAME> not found";
            __shred $AIRLOCK;
            exit $EXIT_ILLEGAL_ARG;
        fi
        gpg --import $KEY_PUBLIC $KEY_PRIVATE;
        compose hr;
        compose h1 "Editing $KEYNAME"
        compose body "To close, exit this shell."
        compose hr;
        bash -l;
        gpg --delete-secret-key $KEYNAME\!;
    cd -;

    __shred $AIRLOCK;
}

function __push-key {
    KEY=$1

    if [[ "$KEY" == "" ]]; then
        compose error "Key argument missing"
        exit $EXIT_ILLEGAL_ARG
    fi

    compose h1 "Sending key to keyservers"
    __push-key-keyserver $KEY keyserver.ubuntu.com
    __push-key-keyserver $KEY pgp.mit.edu
    __push-key-keyserver $KEY keys.openpgp.org
    compose success "Keys pushed"
}

function __push-key-keyserver {
    compose step "Pushing to: $2"
    gpg --keyserver $2 --send-keys $1
}

function __init {
    compose step "Initializing WARD_HOME at $WARD_HOME"
    mkdir -p $WARD_HOME;
    chmod 700 $WARD_HOME;
}

function __clean {
    compose step "Shreding working directory"
    __shred $WARD_HOME
    __init
}

function __help {
    compose h1 "Commands:"
    compose body "[airlock] [file] [--save] - Opens a file in a temporary directory that will be destroyed when closed."
    compose body "[clean] - Clean and re-initialize ward."
    compose body "[copy-prop] [file] [property] - Copy a property from an encrypted file"
    compose body "[decrypt] [file] - Decrypts a file."
    compose body "[encrypt] [file] - Encrypts a file."
    compose body "[init] - Initialize Ward configuration"
    compose body "[keymod] [key] - Temporarily imports a private key"
    compose body "[push-key] [key] - Pushes a key to PGP keyservers"
}

case $COMMAND in
    "help")
        __help;
        ;;
    "airlock")
        __airlock $@;
        ;;
    "clean")
        __clean $@;
        ;;
    "copy-prop")
        __copy-prop $@;
        ;;
    "decrypt")
        __decrypt $@;
        ;;
    "encrypt")
        __encrypt $@;
        ;;
    "init")
        __init $@;
        ;;
    "keymod")
        __keymod $@;
        ;; 
    "push-key")
        __push-key $@;
        ;;
    *)
        compose error "Command '$COMMAND' not found";
        __help;
        exit $EXIT_ILLEGAL_ARG;
esac
